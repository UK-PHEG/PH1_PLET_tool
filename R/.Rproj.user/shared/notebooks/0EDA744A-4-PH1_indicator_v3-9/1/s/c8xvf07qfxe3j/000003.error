{"frames":[{"func":"lapply(list.of.packages, require, character.only = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(library(package, lib.loc = lib.loc, character.only = TRUE, \n    logical.return = TRUE, warn.conflicts = warn.conflicts, quietly = quietly, \n    mask.ok = mask.ok, exclude = exclude, include.only = include.only, \n    attach.required = attach.required), error = function(e) e)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, \n    warn.conflicts = warn.conflicts, quietly = quietly, mask.ok = mask.ok, \n    exclude = exclude, include.only = include.only, attach.required = attach.required)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch({\n    attr(package, \"LibPath\") <- which.lib.loc\n    ns <- loadNamespace(package, lib.loc)\n    env <- attachNamespace(ns, pos = pos, deps, exclude, include.only) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"loadNamespace(package, lib.loc)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"assignNativeRoutines(dlls[[lib]], lib, env, nsInfo$nativeRoutines[[lib]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(routines, function(type) {\n    lapply(type, function(sym) {\n        varName <- paste0(fixes[1L], sym$name, fixes[2L])\n        if (exists(varName, envir = env, inherits = FALSE))  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(type, function(sym) {\n    varName <- paste0(fixes[1L], sym$name, fixes[2L])\n    if (exists(varName, envir = env, inherits = FALSE)) \n        warning(gettextf(\"failed to assign RegisteredNativeSymbol for %s to %s since %s is already defined in the %s namespace\",  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"paste0(fixes[1L], sym$name, fixes[2L])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in base::try(combine_ts_plots, silent = TRUE) : \n  object 'combine_ts_plots' not found\n"}